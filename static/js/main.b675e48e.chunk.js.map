{"version":3,"sources":["Components/Searchbar/Searchbar.js","Components/ImageGalleryItem/ImageGalleryItem.js","Services/ImagesApi.js","Components/Button/Button.js","Components/Modal/Modal.js","Components/Loader/Loader.js","Components/ImageGallery/ImageGallery.js","App.js","index.js"],"names":["Searchbar","state","searchValue","handleSearchValue","event","setState","currentTarget","value","toLowerCase","handleSubmit","preventDefault","trim","props","onSubmit","toast","error","className","this","type","autoComplete","name","onChange","autoFocus","placeholder","Component","ImageGalleryItem","webformatURL","onToggleModal","largeImageURL","onClick","src","alt","fetchImagesWithQuery","searchQuery","pageNum","axios","get","then","response","data","hits","Button","loadingMore","modalRoot","document","querySelector","Modal","handleKeyDown","e","code","onClose","handleBackdropClick","target","window","addEventListener","removeEventListener","createPortal","largeImg","Loaders","color","height","width","ImageGallery","images","loading","showModal","prevState","toggleModal","getAttribute","modalClose","prevProps","prevName","prevPage","getData","imagesApi","scrollTo","top","documentElement","scrollHeight","behavior","catch","finally","length","map","id","App","handleFormSubmit","autoClose","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b675e48e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class Searchbar extends Component {\r\n  state = {\r\n    searchValue: \"\",\r\n  };\r\n\r\n  handleSearchValue = (event) => {\r\n    this.setState({ searchValue: event.currentTarget.value.toLowerCase() });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    if (this.state.searchValue.trim() === \"\") {\r\n      toast.error(\"Enter image name, please\");\r\n\r\n      return;\r\n    }\r\n    this.props.onSubmit(this.state.searchValue);\r\n    this.setState({ searchValue: \" \" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <header className=\"Searchbar\" onSubmit={this.handleSubmit}>\r\n        <form className=\"SearchForm\">\r\n          <button type=\"submit\" className=\"SearchForm-button\">\r\n            <span className=\"SearchForm-button-label\">Search</span>\r\n          </button>\r\n\r\n          <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            name=\"searchValue\"\r\n            value={this.state.searchValue}\r\n            onChange={this.handleSearchValue}\r\n            autoFocus\r\n            placeholder=\"Search images and photos\"\r\n          />\r\n        </form>\r\n      </header>\r\n    );\r\n  }\r\n}\r\nSearchbar.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst ImageGalleryItem = ({ webformatURL, onToggleModal, largeImageURL }) => {\r\n  return (\r\n    <li\r\n      className=\"ImageGalleryItem\"\r\n      onClick={onToggleModal}\r\n      data-modal={largeImageURL}>\r\n      <img src={webformatURL} alt=\"\" className=\"ImageGalleryItem-image\" />\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default ImageGalleryItem;\r\n\r\nImageGalleryItem.propTypes = {\r\n  onToggleModal: PropTypes.func.isRequired,\r\n  webformatURL: PropTypes.string.isRequired,\r\n  largeImageURL: PropTypes.string.isRequired,\r\n};\r\n","import axios from \"axios\";\r\n\r\nfunction fetchImagesWithQuery(searchQuery, pageNum) {\r\n  return axios\r\n    .get(\r\n      `https://pixabay.com/api/?q=${searchQuery}&page=${pageNum}&key=22812304-3b9840aba1a79f008a4d1352a&image_type=photo&orientation=horizontal&per_page=12`\r\n    )\r\n    .then((response) => response.data.hits);\r\n}\r\n\r\nexport default {\r\n  fetchImagesWithQuery,\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Button = ({ loadingMore }) => {\r\n  return (\r\n    <div className=\"Button__box\">\r\n      <button className=\"Button\" type=\"button\" onClick={loadingMore}>\r\n        Load More\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n\r\nButton.propTypes = {\r\n  loadingMore: PropTypes.func.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport { createPortal } from \"react-dom\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst modalRoot = document.querySelector(\"#modal-root\");\r\n\r\nexport default class Modal extends Component {\r\n  componentDidMount() {\r\n    window.addEventListener(\"keydown\", this.handleKeyDown);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"keydown\", this.handleKeyDown);\r\n  }\r\n\r\n  handleKeyDown = (e) => {\r\n    if (e.code === \"Escape\") {\r\n      this.props.onClose();\r\n    }\r\n  };\r\n\r\n  handleBackdropClick = (event) => {\r\n    if (event.currentTarget === event.target) {\r\n      this.props.onClose();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return createPortal(\r\n      <div className=\"Overlay\" onClick={this.handleBackdropClick}>\r\n        <div className=\"Modal\">\r\n          <img src={this.props.largeImg} alt=\"\" />\r\n        </div>\r\n      </div>,\r\n      modalRoot\r\n    );\r\n  }\r\n}\r\nModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  largeImg: PropTypes.string.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nexport default class Loaders extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Loader\">\r\n        <Loader type=\"Hearts\" color=\"#00BFFF\" height={50} width={50} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from \"react\";\r\nimport ImageGalleryItem from \"../ImageGalleryItem\";\r\nimport imagesApi from \"../../Services/ImagesApi\";\r\nimport Button from \"../Button\";\r\nimport Modal from \"../Modal/Modal\";\r\nimport Loader from \"../Loader\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nexport default class ImageGallery extends Component {\r\n  state = {\r\n    images: [],\r\n    loading: false,\r\n    error: false,\r\n    pageNum: 1,\r\n    showModal: false,\r\n    largeImageURL: \"\",\r\n  };\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    const prevName = prevProps.searchValue;\r\n    const prevPage = prevState.pageNum;\r\n    const { pageNum } = this.state;\r\n\r\n    const searchQuery = this.props.searchValue;\r\n    if (prevName !== searchQuery || prevPage !== pageNum) {\r\n      this.getData();\r\n    }\r\n  }\r\n  getData() {\r\n    const { pageNum } = this.state;\r\n    const searchValue = this.props.searchValue;\r\n\r\n    this.setState({ loading: true });\r\n    imagesApi\r\n      .fetchImagesWithQuery(searchValue, pageNum)\r\n      .then((images) => {\r\n        if (pageNum === 1) {\r\n          this.setState({ images });\r\n        } else {\r\n          this.setState((prevState) => ({\r\n            images: [...prevState.images, ...images],\r\n          }));\r\n\r\n          window.scrollTo({\r\n            top: document.documentElement.scrollHeight,\r\n            behavior: \"smooth\",\r\n          });\r\n        }\r\n      })\r\n      .catch((error) => this.setState({ error }))\r\n      .finally(() => this.setState({ loading: false }));\r\n  }\r\n  loadingMore = (prevState) => {\r\n    this.setState((prevState) => ({ pageNum: prevState.pageNum + 1 }));\r\n  };\r\n\r\n  toggleModal = (event) => {\r\n    let largeImg;\r\n    const { showModal } = this.state;\r\n\r\n    if (!showModal) {\r\n      largeImg = event.currentTarget.getAttribute(\"data-modal\");\r\n    }\r\n\r\n    this.setState(({ showModal }) => ({\r\n      showModal: !showModal,\r\n      largeImageURL: largeImg,\r\n    }));\r\n  };\r\n\r\n  modalClose = () => {\r\n    this.setState((prevState) => ({ largeImageURL: !prevState.largeImageURL }));\r\n  };\r\n\r\n  render() {\r\n    const { images, loading, showModal } = this.state;\r\n    const { searchValue } = this.props.searchValue;\r\n    return (\r\n      <>\r\n        {searchValue && <div>Enter ...</div>}\r\n        {images.length > 0 && (\r\n          <>\r\n            <ul className=\"ImageGallery\">\r\n              {images.map(({ webformatURL, largeImageURL, id }) => {\r\n                return (\r\n                  <ImageGalleryItem\r\n                    key={id}\r\n                    onToggleModal={this.toggleModal}\r\n                    webformatURL={webformatURL}\r\n                    largeImageURL={largeImageURL}\r\n                  />\r\n                );\r\n              })}\r\n            </ul>\r\n            {!loading && <Button loadingMore={this.loadingMore} />}\r\n          </>\r\n        )}\r\n        {loading && <Loader />}\r\n        {showModal && (\r\n          <Modal\r\n            onClose={this.toggleModal}\r\n            largeImg={this.state.largeImageURL}></Modal>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\nImageGallery.propTypes = {\r\n  searchValue: PropTypes.string.isRequired,\r\n};\r\n","import React, { Component } from \"react\";\nimport Searchbar from \"./Components/Searchbar\";\nimport { ToastContainer } from \"react-toastify\";\nimport ImageGallery from \"./Components/ImageGallery\";\nimport styles from \"./styles.css\";\nclass App extends Component {\n  state = {\n    searchValue: \"\",\n  };\n  handleFormSubmit = (searchValue) => {\n    this.setState({ searchValue });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Searchbar onSubmit={this.handleFormSubmit} />\n        <ToastContainer autoClose={3000} />\n        <ImageGallery searchValue={this.state.searchValue} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}